Ебучие статьи по GIT:

1) https://pingvinus.ru/git/1718 - Команда Git stash. Как прятать изменения в Git

2) https://habr.com/ru/post/342116/?ysclid=l5roldygcr690991735 - Git на практике. Принципы работы

3) https://webdevkin.ru/courses/git/git-merge?ysclid=l5ule4smo8458230577 - Слияния или мерджи веток.

4) https://habr.com/ru/post/157175/?ysclid=l5va8j4kfq739624019 - Машина времени GIT, как это работает.

5) https://ru.stackoverflow.com/questions/431520/%D0%9A%D0%B0%D0%BA-%D0%B2%D0%B5%D1%80%D0%BD%D1%83%D1%82%D1%8C%D1%81%D1%8F-%D0%BE%D1%82%D0%BA%D0%B0%D1%82%D0%B8%D1%82%D1%8C%D1%81%D1%8F-%D0%BA-%D0%B1%D0%BE%D0%BB%D0%B5%D0%B5-%D1%80%D0%B0%D0%BD%D0%BD%D0%B5%D0%BC%D1%83-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B8%D1%82%D1%83?ysclid=l5qjc18et756373348 - Как вернуться (откатиться) к более раннему коммиту?

6) https://habr.com/ru/company/skillbox/blog/534972/?ysclid=l5qiycof4m932594346 - Git, я хочу все отменить! Команды исправления допущенных ошибок

-----------------------------------------------------------------

Установить GIT
# apt get install git

Посмотреть версию GIT
# git --version

Начальная конфигурация
Задаем имя пользователя. Будет отображаться напротив наших коммитов
# git config --global user.name "Daniil Misyurin"
Задаем адерс почты.
# git config --global user.email "d.a.misyurin@gmail.com"
Просмотреть текущую конфигурация GIT
# git config -l
Вся конфигурация хранится в файл ~/.gitconfig домашней директории
В Windows делается аналогичными образом и командами

Создание пустой базы GIT на локальном компьютере
# git init .

Отобразить статус GIT (показывает добавленные и измененные файлы)
# git status

Отобразить все игнорируемые файлы:
git status --ignored

Показать все Untracked файлы
# git ls-files --others --exclude-standa

Добавить все вновь созданные файлы в отслеживаемые
# git add * (git add .)

Добавить один созданный файл в отслеживаемые
# git add file3

Убрать из индекса (из отслеживаемых)
# git restore --staged .

Сделать коммит, сделать снимок (добавить изменения в наш репозиторий)
# git commit -m "My fits commit, this is version 1.0"

Удалит папку или файл из контроля 
git rm -r --cached backend/qualitasleather_root/qualitasleather/__pycache__/

Изменить описание последнего коммита
# git commit --amend -m "New message"

Проверить история commit
# git log

Посмотреть последний commit
# git log -1

Посмотреть подробную информацию о последнем commit, что именно в нем было изменено
# git log -1 -p

Посмотреть информацию о коммитах в одну строку
# git log --pretty=oneline

Посмотреть информацию о коммитах всех веток (независимо от указателя HEAD) в одну строку
# git log --all --oneline

Посмотреть информацию о всех комитах с перечнем включенных в них файлов
# git log --name-status 

Отменить изменения в файле и откатить изменения файла до полследнего commit, делает до добавления
файла в Staged. Т.е. после получения файла статуса modified
# git checkout -- file1.txt

Показывает текущие изменения в репозитории до выполнения commit (разница между staged и 
последним commit)
# git diff --staged

Просмотр всех изменений
# git diff

Просмотр изменений в отдельном файле
# git diff index.html


Добавить файлы или папки в игнорируемые. Создать в корне проекта файл .gitignore
# vim .gitignore
    *.log   
    logs/
    file1.txt
 
#######################################################
############ Работа с удаленным репозиторием ############
#######################################################

Клонировать уже имеющийся Git-hub репозиторий
# git clone https:\\...

Добавить новый удаленный репоиторий куда мы хотим пушить (origin - название репозитория)
# git remote add origin git@github.com:MisyurinDaniil/test.git
Проветить что репозиторий добавился 
# git remote -v
Изменить ссылку удаленного репозитория
# git remote set-url origin git@github.com:MisyurinDaniil/myManualsProgramming.git

Отправить все локальные изменения на удаленный репозиторий origin в ветку master
# git push -u origin master

Отправить все commit на Git-hub (спросит логин пароль), по умолчанию в ветку 
main (данное название основной ветки исполльзуют все современные сервисы)
# git push -u origin main 

@@@@@@@@@@@@ Каково назначение ключа `-u` при git push? @@@@@@@@@@@
С ключом -u (полный вариант --set-upstream) вы создаёте (если ещё не существует) в удалённом репозитории ветку, соответствующую вашей локальной и связываете их:

    В remote/branchname будет производиться push в локальную ветку branchname
    Из remote/branchname будет производиться pull в локальную ветку branchname

Для master это актуально, только если вы пушите в пустой репозиторий. Если клонировали - то соответствие ветвей уже настроено. А вот как только вы создадите новую локальную ветвь и захотите её запушить на remote, вам понадобится ключ -u.
Если сделать git push ветки без ключа -u, Git не свяжет локальную ветку с веткой удалённого репозитория. Последующая операция git pull в этой ветке будет неудачной, так как Git не будет знать, из какой удалённой ветки подтягивать изменения, это придётся указать явно при помощи команды git branch --set-upstream-to=origin/master. Смысл использовать ключ -u есть только при пуше новых веток, для существующих (связанных с удалёнными) веток каждый раз перезаписывать связку необязательно.

Создать новую ветку
Создать коммит
Запушить новую ветку на удаленный сервер и сделать ее отслеживаемой
# git checkout -b <branch>
# git add .
# git commit -m " "
# git push -u origin <branch>




Чтобы забрать изменения из удаленной ветки dev репозитория origin и слить их с изменениями в текущей ветке, 
где мы находимся, выполним:
# git pull origin dev

Локально создали новую ветку test, внесли изменения и хотим запушить на github нашу ветку для дальнейшего merge с master
Создаст на github ветку test и запушит в нее все коммиты
# git push --set-upstream origin test 

Удалить ветку new_branch на удаленном сервере git-hub
# git push origin --delete new_branch

Настройка аутентификации по SSH Linux.
Генерируем ssh ключи 
# ssh-keygen (на все вопросы отвечаем по умолчанию)
В домашней директории пользователся появится папка .ssh с парой ключей
Далее копируем открытый ключь (id-rsa.pub) в github - settings - SSH - SSH keygen

Настройка аутентификации по SSH Windows. 
Утилита для генерации праы SSH ключей на Windows. Запускаем git-bash
# ssh-keygen.exe (на все вопросы отвечаем по умолчанию)
В домашней директории пользователся появится папка .ssh с парой ключей
Далее копируем открытый ключь (id-rsa.pub) в github - settings - SSH - SSH keygen

Указываем git где лежит необходимый для данного репозитория SSH ключей.
Предварительно задав необходимые права на закрытый ключ
# chmod 400 ~/.ssh/id_rsa_example
# git config core.sshCommand "ssh -i ~/.ssh/id_rsa_example -F /dev/null"

###########################################
############ Ветвления (branch) ############
###########################################

Показать имеющиеся ветви 
# git branch

Создать ветвь fix_error
# git branch fix_error

Перейти на ветвь fix_error
# git checkout fix_error

Стереть ветвь fix_error, будет ругаться, если не сделать merge
# git branch -d fix_error

Стереть ветвь без предварительного merge
# git branch -D fix_error

Создать и перейти на ветвь fix_error
# git checkout -b fix_error

Соеденить весть main с ветвью fix_error
Перейдем в ветвь main и сделаем merge
# git checkout main
# git merge fix_error

Переключится на один из коммитов.
Копируем хэш коммита, посмотреть его можно командой git log и выполняем команду
# git checkout 8cda9b3d53d728a79810fabc6ae5bcc58ddc0c47

Вернуться на верх ветки main
# git checkout main

Изменить текущий коммит (изменили содержимое файлов или что-то добавили, но не хотим удалять и создавать новый коммит),
так же позволяет изменить опиание коммита
# git commit --amend

Удалить последний коммит и запушить на удаленный сервер (при условии, что после нас никто не пушил
# git reset --hard HEAD~1
# git push --force

Удалить 2 (~2) верхних коммита и переместиться на третий сверху
# git reset --hard HEAD~2

Удалить из истории 4 (~4) верхнит коммита, перейти на 5й, но файлы оставить из 1го
# git reset --soft HEAD~4


#############################
############ Теги ############
############################

Git использует два основных типа тегов: легковесные и аннотированные.

Легковесный тег — это что-то очень похожее на ветку, которая не изменяется — просто указатель на определённый коммит.

А вот аннотированные теги хранятся в базе данных Git как полноценные объекты. 
Они имеют контрольную сумму, содержат имя автора, его e-mail и дату создания, имеют комментарий 

Показать теги
# git tag

Показать информацию об определенном теге
git show v1.0

Создание аннотированного тега в Git выполняется легко. Самый простой способ — это указать -a при выполнении команды tag
Опция -m задаёт сообщение, которое будет храниться вместе с тегом. Если не указать сообщение, то Git запустит редактор, чтобы вы смогли его ввести
# git tag -a v1.4 -m "my version 1.4"
# git tag
v0.1
v1.3
v1.4
 
Легковесный тег—это ещё один способ пометить коммит. По сути, это контрольная сумма коммита, сохранённая в файл—больше никакой информации не хранится.
# git tag v1.4-lw
# git tag
v0.1
v1.3

По умолчанию, команда git push не отправляет теги на удалённые сервера. После создания теги нужно отправлять явно на удалённый сервер. Процесс аналогичен отправке веток — достаточно выполнить команду git push origin <tagname>
# git push origin v1.5

Если у вас много тегов, и вам хотелось бы отправить все за один раз, то можно использовать опцию --tags для команды git push. В таком случае все ваши теги отправятся на удалённый сервер (если только их уже там нет)
# git push origin --tags

Для удаления тега в локальном репозитории достаточно выполнить команду git tag -d <tagname>. Например, удалить созданный ранее легковесный тег можно следующим образом:
# git tag -d v1.4-lw
Deleted tag 'v1.4-lw' (was e7d5add)

Обратите внимание, что при удалении тега не происходит его удаления с внешних серверов. Существует два способа изъятия тега из внешнего репозитория.

Первый способ — это выполнить команду git push <remote> :refs/tags/<tagname>:
# git push origin :refs/tags/v1.4-lw
To /git@github.com:schacon/simplegit.git
 - [deleted]         v1.4-lw

Это следует понимать как обновление внешнего тега пустым значением, что приводит к его удалению.

Второй способ убрать тег из внешнего репозитория более интуитивный:
# git push origin --delete <tagname>

Если вы хотите получить версии файлов, на которые указывает тег, то вы можете сделать git checkout для тега. Однако, это переведёт репозиторий в состояние «detached HEAD», которое имеет ряд неприятных побочных эффектов.
# git checkout v2.0.0

Если в состоянии «detached HEAD» внести изменения и сделать коммит, то тег не изменится, при этом новый коммит не будет относиться ни к какой из веток, а доступ к нему можно будет получить только по его хешу. Поэтому, если вам нужно внести изменения — исправить ошибку в одной из старых версий — скорее всего вам следует создать ветку:

# git checkout -b version2 v2.0.0
Switched to a new branch 'version2'

Если сделать коммит в ветке version2, то она сдвинется вперед и будет отличаться от тега v2.0.0, так что будьте с этим осторожны.

##########################################################
############ Отображение кирилицы в консоле git  ############
#########################################################

По умолчанию программа git при выводе путей (команды типа state, ls-files, diff и т.п.) 
символы с кодом больше 0x80 заменяет их восьмиричными кодами (например, \320\272 для символа «к»).
Начиная с версии 1.5.3 это поведение можно изменить с помощью конфигурационного параметра core.quotepath 
(принимает значения true/false или on/off).
для отключения такого преобразования только в текущем хранилище выполните:
# git config core.quotepath false
для глобального отключения добавьте опцию --global:
# git config --global core.quotepath false


####################################################################
############ Сказать git какой из ssh-ключей использовать ############
###################################################################


Предположим, что в bitbucket мы ходим с одним ключем, а в github хотим ходить с другим. Мы можем добавить такую конфигурацию в файл ~/.ssh/config:
    
Host github github.com
    HostName github.com
    User git
    IdentityFile ~/.ssh/own_id_rsa

В опции IdentityFile укажем путь к ключу, с которым хотим ходить в github. Теперь можно клонировать репозиторий из github без проблем и git push в него и тд.:

    git clone git@github.com:username/reponame.git
    git push

Нужный identity будет использоваться автоматически, так как прописан в ~/.ssh/config файле.


-----------------------------------------------------------------

##########################################################
############ Словарь терминов для Git и GitHub ############
#########################################################

Git или Гит — система контроля и управления версиями файлов.

GitHub или Гитхаб — веб-сервис для размещения репозиториев и совместной разработки проектов.

Репозиторий Git — каталог файловой системы, в котором находятся: файлы конфигурации, 
файлы журналов операций, выполняемых над репозиторием, индекс расположения файлов и хранилище, содержащее сами контролируемые файлы.

Локальный репозиторий — репозиторий, расположенный на локальном компьютере разработчика в каталоге. 
Именно в нём происходит разработка и фиксация изменений, которые отправляются на удалённый репозиторий.

Удалённый репозиторий — репозиторий, находящийся на удалённом сервере. Это общий репозиторий, 
в который приходят все изменения и из которого забираются все обновления.

Форк (Fork) — копия репозитория. Его также можно рассматривать как внешнюю ветку для текущего репозитория. 
Копия вашего открытого репозитория на Гитхабе может быть сделана любым пользователем, после чего он может 
прислать изменения в ваш репозиторий через пулреквест.

Обновиться из апстрима — обновить свою локальную версию форка до последней версии основного репозитория, от которого сделан форк.

Обновиться из ориджина — обновить свою локальную версию репозитория до последней удалённой версии этого репозитория.

Клонирование (Clone) — скачивание репозитория с удалённого сервера на локальный компьютер 
в определённый каталог для дальнейшей работы с этим каталогом как с репозиторием.

Ветка (Branch) — это параллельная версия репозитория. Она включена в этот репозиторий, 
но не влияет на главную версию, тем самым позволяя свободно работать в параллельной. 
Когда вы внесли нужные изменения, то вы можете объединить их с главной версией.

Мастер (Master) — главная или основная ветка репозитория.

Коммит (Commit) — фиксация изменений или запись изменений в репозиторий. Коммит происходит на локальной машине.

Пул (Pull) — получение последних изменений с удалённого сервера репозитория.

Пуш (Push) — отправка всех неотправленных коммитов на удалённый сервер репозитория.

Пулреквест (Pull Request) — запрос на слияние форка репозитория с основным репозиторием. 
Пулреквест может быть принят или отклонён вами, как владельцем репозитория.

Мёрдж (Merge) — слияние изменений из какой-либо ветки репозитория с любой веткой этого же репозитория. 
Чаще всего слияние изменений из ветки репозитория с основной веткой репозитория.

Кодревью — процесс проверки кода на соответствие определённым требованиям, задачам и внешнему виду.


Перечень состояний файлов в Git
1) Untracked - после создания файла
2) Staged - после добавления файла в отслеживаемые (git add file.txt)
3) Copy in Local Repository - после добаления изменения в репозиторий (git commit -m "Version 1")
4) Copy in Remote Repository - после добавления на удаленный репозторий (git push)
