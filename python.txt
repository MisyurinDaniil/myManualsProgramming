Создаст виртуальное окружение для текущей установленной версии python в директории venv	
	>>> python -m venv venv

Создаем виртуальную среду для определенной версии python
	C:\Users\admin\AppData\Local\Programs\Python\Python310\python.exe -m venv venv310	
	
Перейдем в дирию .\venv\Scripts и запустим окружение
	>>> cd venv\Scripts
	>>> activate
	
Установим пакет Django
	>>> python.exe -m pip install Django
	
Создать новый проект Django с именем mysite
	>>>django-admin startproject mysite
	
Переходим в дирекрию с файлом manage.py и запускаем Django сервер
	>>> cd C:\Users\admin\Documents\Programming\python\mysite_root
	>>> python manage.py runserver
	
Установка пакета Django более старой версии
	>>> pip install Django==<номер более ранней версии>
	>>> pip install django==2.1
	
Создаем приложение с именем crm
	>>> python manage.py startapp crm

######################################
########## Модель в Django ###############
######### Работа с админ панелью ###########
######################################	
	
Создадим модель нашего приложения crm. Отредактируем файл crm/models.py
	from django.db import models

	# Create your models here.
	# Создаем клас Order (название класса = название таблицы в БД), название полей, тип, параметры поля
	class Order(models.Model):
		# order_dt - имя поля таблицы с типом DateTimeField
		order_dt = models.DateTimeField(auto_now=True)
		# verbose_name - имя поля отображаемого в админ панеле
		order_name = models.CharField(max_length=200, verbose_name='Имя')
		order_phone = models.CharField(max_length=200, verbose_name='Телефон')

		# Измененеие отображения имени объекта. __str__ - это строковое представление объекта
		# Получим корректное отображение имени объекта в админ паненле
		def __str__(self):
			return self.order_name

		# Изменение отображения имени класса, в единственном и множественном числе
		class Meta:
			verbose_name = "Заказ"
			verbose_name_plural = "Заказы"
	В файле mysite/settings.py подключим приложение
		INSTALLED_APPS = [
		'crm.apps.CrmConfig',
		]
	
Добавим приложение в админ панель. Редактируем файл crm/admin.py
	from django.contrib import admin
	from .models import Order
	# Register your models here.
	admin.site.register(Order)

Выполним миграцию. 
Миграция синхронизует структуру базы данных с определением моделей
	>>> python manage.py makemigrations
	>>> python manage.py migrate
	
Запускаем интерактивную консоль shell. Выполняем операцию миграции в ручную
	>>> python manage.py shell
	
Выполняем python запросы для заполнения данных таблицы создданной с помощью
миграции модели. Работа с Django ORM
	Импортируем созданный ранее класс
	>>> from crm.models import Order
	Создадим экземпляр класса (модели)
	>>>  n = Order(order_name="Ivan", order_phone="+79896312233")
	Сохранение в БД созданного экземпляра класса
	>>> n.save()
	Просмотрим создданый SQL запрос.
	Для этого импортируем модуль 
	>>> from django.db import connection
	Выведем запросы
	>>> connection.queries
	[{'sql': 'INSERT INTO "crm_order" ("order_dt", "order_name", "order_phone") VALUES (\'2022-06-18 12:07:08.837961\', \'Ivan\', \'+79896312233\')', 'time': '0.172'}]
	Еще один способ добавить данные в таблицу. При использовании данного метода сохранять данные не нужно,
	запись в БД происходит тут же. objects - диспечер записей БД
	n3 = Order.objects.create(order_name="Anna", order_phone="+79998887766")

Получим все эксземпляры класса Order (поля таблицы Order)
	>>> Order.objects.all()

Вывести только необходимые записи
	>>> Order.objects.filter(order_name="Anna")
	
Отсортировать запросы по возрастанию, по определенному полю
	>>> Order.objects.order_by('id')

Отсортировать запросы по возрастанию, по определенному полю в обратном порядке
	>>> Order.objects.order_by('-id')

Получить определенную запись по privet key (в нашем случае id), может отдать только одну запсь.
Поменять значение и сохранить.
	>>> order1 = Order.objects.get(pk=1)
	>>> order1.order_name
	'Ivan'
	>>> order1.order_name = "Ulya"
	>>> order1.save()
	
Выход из shell 
	>>> exit()
	
Создадим суперпользователся Admin панели
	>>> python manage.py createsuperuser
	
Поменять язык админ панели Django.
Редактируем файл mysite/settings
	LANGUAGE_CODE = 'ru-RU'
	TIME_ZONE = 'Europe/Moscow'

######################################################
########## Шаблоны, маршрутизация в Django ###########
######################################################
	
Создадим шаблон Django
	Пропишем путь до папки с шаблоном в файле mysite/settings
		'DIRS': ['templates'],
	Создадим дирректорию templates в папке проекта и поместим в нее файл index.html
		<!DOCTYPE html>
		<html lang="en">
		<head>
			<meta charset="UTF-8">
			<title>Title</title>
		</head>
		<body>
			<!-- {% url 'thanks'%} - конструкция позволяет не пользоваться абсолютными и относительными именами,
				а использовать значение переменной name у маршрута в файле mysite/urls.py
				Поумолчанию используется метод GET.
				При исаользовании метода POST необходимо использовать CSRF_TOKEN для недопущения CSRF уязвимостей
			 -->
			<form action="{% url 'thanks'%}" method="POST">
				{% csrf_token %}
				<style>
					.css-input {
					color:yellow;
					background-color: #81d4fa;
				}
				</style>
				<!--        <label for="name">Имя</label>-->
				<!--        <input type="text" name="name">-->
				<!--        <label for="phone">Телефон</label>-->
				<!--        <input type="text" name="phone">-->
				<!--
					Отрисовываем форму созданную с помощью встроенное класса Forms
					Отобразим форму как параграф {{ form.as_p}} - все элементы с новой строки
				-->
				{{form.as_p}}
				<button type="submit">Отправить</button>
			</form>
			<br/>
			<br/>
			{% if object_list %}
			<table border="1">
				<tr>
					<td>ID</td>
					<td>Date</td>
					<td>Name</td>
					<td>Phone</td>
				</tr>
				<!-- Цикл for, object_list передается через функцию объявленную в контроллекре (файл view.py) -->
				{% for obj in object_list %}
				<tr>
					<td>{{obj.id}}</td>
					<td>{{obj.order_dt}}</td>
					<td>{{obj.order_name}}</td>
					<td>{{obj.order_phone}}</td>
				</tr>
				{% endfor %}
			</table>
			{% else  %}
			Нет данных
			{% endif %}
		</body>
		</html>
	Для отображения переменных из контролеера (views.py) используется конструкция {{ переменная }}
	
Настроим контроллер (crm/views.py) приложения crm
			
	from django.shortcuts import render
	from . models import Order

	# Create your views here.

	def first_page(request):
		# Получаем все эксземпляры класса Order (все строки из таблицы Заказы)
		object_list = Order.objects.all()
		# Отрисовываем полученные данные на странице index.html
		return render(request, './index.html', {
			'object_list': object_list,
		})
	def thanks_page(request):
		# Принемаем данные переданные формой методом Get
		# name = request.GET['name']
		# phone = request.GET['phone']
		# Принемаем данные переданные формой методом POST
		name = request.POST['name']
		phone = request.POST['phone']
		# Создаем экземпляр класса Order
		element = Order(order_name = name, order_phone = phone)
		# Записываем данные в таблицу
		element.save()
		return render(request, './thanks_page.html', {
			'name': name,
			'phone': phone,
		})
		
##############################################
################ Формы Django ################
##############################################

Создадим фалй crm/forms.py с слудющим содержанием
	# импортируем класс forms
	from django import forms

	class OrderForm(forms.Form):
		# Создаем два поля класса OrderForm
		# Создаем два input type=text, все поля являеютмя обязательными для заполнения поумолчанию,
		# форма не отправится без заполненных полей, имеет встроенную валидацию
		# required=False - делает поле необязательным
		# widget=forms.TextInput(attrs={'class' : 'css-input'} - зададим класс тегу input для настройки css
		name = forms.CharField(max_length=200, required=False, widget=forms.TextInput(attrs={'class' : 'css-input'}))
		phone = forms.CharField(max_length=200)

В crm/views.py подключим форму и передадим в шаблон
	from django.shortcuts import render
	from . models import Order
	from . forms import OrderForm

	# Create your views here.

	def first_page(request):
		# Получаем все эксземпляры класса Order (все строки из таблицы Заказы)
		object_list = Order.objects.all()
		# Cоздадим экземпляр формы
		form = OrderForm()
		# Отрисовываем полученные данные на странице index.html
		return render(request, './index.html', {
			'object_list': object_list,
			'form': form,
		})
	
Отрисуем ее в шаблоне index.html 
		<!--
            Отрисовываем форму созданную с помощью встроенное класса Forms {{ form }}
            Отобразим форму как параграф {{ form.as_p}} - все элементы с новой строки
		-->
        {{form.as_p}}
		
##############################################
########### Наследование шаблонов ###########
##############################################

Создадим в файл templates/base.html
Название base.html - зарезервированное имя в Django
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="UTF-8">
		<title>{% block title %}Title base{% endblock %}</title>
	</head>
	<body>
		<header>
			<h1>Шапка</h1>
		</header>
	<!--    Подключим блок с имененм content-->
		{% block content %}
	<!--    Закроем блок-->
		{% endblock %}
		<footer>
			<h1>Подвал</h1>
		</footer>
	</body>
	</html>
Создадим новый файл index.html
	<!--Наследуемся от шаблона base.html-->
	{% extends 'base.html' %}

	<!--{% block title %}Title index{% endblock %}-->

	<!--    Создадим блок с имененм content-->
	{% block content %}
		<h2>Блок из файла index.html</h2>
		<!--    Подключим и отрисуем старый файл index_old.html. В него также будут переданы переменны из view.py-->
		{% include 'index_old.html' %}
	<!--    Закроем блок-->
	{% endblock %}
	
##############################################
####### Работа со статическими файлами #######
##############################################

Пропишем путь к директории со стотическими файлами
	STATICFILES_DIRS = [
		BASE_DIR / "mysite/static/"
	]

В HTML файле (index.html) прописываем, что будем использовать статические файлы
	<!--    Указываем что будем загружать статические файлы     -->
	{% load static %}
	<!--  Подгружаем статический файл  -->
	<link rel="stylesheet" href="{% static 'style.css' %}">
    <img src="{% static 'img\1.jpg' %}" alt="" height="300">

Для боевого сервера все файлы складывают в одну диррректорию STATIC_ROOT
Пропишем в файл mysite/settings	
	# ! Указываем дополнительную папку для статических файлов
	# ! Cтатические активы, которые не привязаны к конкретному приложению
	STATICFILES_DIRS = [
		BASE_DIR / "mysite/static/"
	]
	# ! URL для использования при обращении к статическим файлам, расположенным в STATIC_ROOT
	STATIC_URL = 'static/'
	# ! Директория сбора статических файлов в одном месте для production
	STATIC_ROOT = os.path.join(BASE_DIR, 'static')
	# ! URL, который обрабатывает медиа, обслуживаемые из MEDIA_ROOT
	MEDIA_URL = 'media/'
	# ! Директория для сбора статических файлов в одном месте для production
	MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

Выполним команду для сбора файлов в одну директорию для боевого сервера
	python manage.py collectstatic
	
Обслуживание файлов, загруженных пользователем во время разработки¶
Эта вспомогательная функция работает только в режиме отладки.
	from django.conf import settings
	from django.conf.urls.static import static

	urlpatterns = [
		# ... the rest of your URLconf goes here ...
	] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

##############################################
########### Админ панель ###########
#############################################

Шаблоны админ панели django находятся по следующему пути
C:\Users\admin\Documents\Programming\python\venv\Lib\site-packages\django\contrib\admin\templates\admin


##############################################
########### Типы данных Python ###########
#############################################


# Разбриаемся с Python. Типы данных, переменные

number = 1
print(number, type(number))
# >>> 1 <class 'int'>

text = 'My text'
print(text, type(text))
# >>> My text <class 'str'>

type_list = [1, 'a', 2, 'b', [1, 'a', 2, 'b'], (1, 'a', 2, 'b')]
print(type_list, type(type_list))
# >>> [1, 'a', 2, 'b'] <class 'list'>

corteg=(1, 'a', 2, 'b')
print(corteg, type(corteg))
# >>> (1, 'a', 2, 'b') <class 'tuple'>

dictionary = {
    '1': 1,
    2 : 2,
    'Три' : 'Три'
}
print(dictionary, type(dictionary))

class MyClass():
    def __init__(self, name, age):
        self.name = name
        self.age = age
people = MyClass('Pol','11')
print(MyClass, type(MyClass))
print(people, type(people))
# >>> <class 'appProductItem.views.MyClass'> <class 'type'>
# >>> <appProductItem.views.MyClass object at 0x00000172EE585D20> <class 'appProductItem.views.MyClass'>

product_list = ProductItem.objects.all()
print(product_list, type(product_list))
# >>> <QuerySet [<ProductItem: Сумка черная большая>]> <class 'django.db.models.query.QuerySet'>
