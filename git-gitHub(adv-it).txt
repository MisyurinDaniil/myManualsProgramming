Словарь терминов для Git и GitHub

Git или Гит — система контроля и управления версиями файлов.

GitHub или Гитхаб — веб-сервис для размещения репозиториев и совместной разработки проектов.

Репозиторий Git — каталог файловой системы, в котором находятся: файлы конфигурации, 
файлы журналов операций, выполняемых над репозиторием, индекс расположения файлов и хранилище, содержащее сами контролируемые файлы.

Локальный репозиторий — репозиторий, расположенный на локальном компьютере разработчика в каталоге. 
Именно в нём происходит разработка и фиксация изменений, которые отправляются на удалённый репозиторий.

Удалённый репозиторий — репозиторий, находящийся на удалённом сервере. Это общий репозиторий, 
в который приходят все изменения и из которого забираются все обновления.

Форк (Fork) — копия репозитория. Его также можно рассматривать как внешнюю ветку для текущего репозитория. 
Копия вашего открытого репозитория на Гитхабе может быть сделана любым пользователем, после чего он может 
прислать изменения в ваш репозиторий через пулреквест.

Обновиться из апстрима — обновить свою локальную версию форка до последней версии основного репозитория, от которого сделан форк.

Обновиться из ориджина — обновить свою локальную версию репозитория до последней удалённой версии этого репозитория.

Клонирование (Clone) — скачивание репозитория с удалённого сервера на локальный компьютер 
в определённый каталог для дальнейшей работы с этим каталогом как с репозиторием.

Ветка (Branch) — это параллельная версия репозитория. Она включена в этот репозиторий, 
но не влияет на главную версию, тем самым позволяя свободно работать в параллельной. 
Когда вы внесли нужные изменения, то вы можете объединить их с главной версией.

Мастер (Master) — главная или основная ветка репозитория.

Коммит (Commit) — фиксация изменений или запись изменений в репозиторий. Коммит происходит на локальной машине.

Пул (Pull) — получение последних изменений с удалённого сервера репозитория.

Пуш (Push) — отправка всех неотправленных коммитов на удалённый сервер репозитория.

Пулреквест (Pull Request) — запрос на слияние форка репозитория с основным репозиторием. 
Пулреквест может быть принят или отклонён вами, как владельцем репозитория.

Мёрдж (Merge) — слияние изменений из какой-либо ветки репозитория с любой веткой этого же репозитория. 
Чаще всего слияние изменений из ветки репозитория с основной веткой репозитория.

Кодревью — процесс проверки кода на соответствие определённым требованиям, задачам и внешнему виду.


Установить GIT
# apt get install git

Посмотреть версию GIT
# git --version

Начальная конфигурация
Задаем имя пользователя. Будет отображаться напротив наших коммитов
# git config --global user.name "Daniil Misyurin"
Задаем адерс почты.
# git config --global user.email "d.a.misyurin@gmail.com"
Просмотреть текущую конфигурация GIT
# git config -l
Вся конфигурация хранится в файл ~/.gitconfig домашней директории
В Windows делается аналогичными образом и командами

Создание пустой базы GIT на локальном компьютере
# git init .

Отобразить статус GIT (показывает добавленные и измененные файлы)
# git status

Добавить все вновь созданные файлы в отслеживаемые
# git add * (git add .)

Добавить один созданный файл в отслеживаемые
# git add file3

Убрать из индекса (из отслеживаемых)
# git restore --staged .

Сделать коммит, сделать снимок (добавить изменения в наш репозиторий)
# git commit -m "My fits commit, this is version 1.0"

Изменить описание последнего коммита
# git commit --amend -m "New message"

Перечень состояний файлов в Git
1) Untracked - после создания файла
2) Staged - после добавления файла в отслеживаемые (git add file.txt)
3) Copy in Local Repository - после добаления изменения в репозиторий (git commit -m "Version 1")
4) Copy in Remote Repository - после добавления на удаленный репозторий (git push)

Проверить история commit
# git log

Посмотреть последний commit
# git log -1

Посмотреть подробную информацию о последнем commit, что именно в нем было изменено
# git log -1 -p

Посмотреть информацию о коммитах в одну строку
# git log --pretty=oneline

Посмотреть информацию о всех комитах с перечнем включенных в них файлов
# git log --name-status 

Отменить изменения в файле и откатить изменения файла до полследнего commit, делает до добавления
файла в Staged. Т.е. после получения файла статуса modified
# git checkout -- file1.txt

Показывает текущие изменения в репозитории до выполнения commit (разница между staged и 
последним commit)
# git diff --staged

Добавить файлы или папки в игнорируемые. Создать в корне проекта файл .gitignore
# vim .gitignore
    *.log   
    logs/
    file1.txt

Клонировать уже имеющийся Git-hub репозиторий
# git clone https:\\...

Добавить новый удаленный репоиторий куда мы хотим пушить (origin - название репозитория)
# git remote add origin git@github.com:MisyurinDaniil/test.git
Проветить что репозиторий добавился 
# git remote -v
Изменить ссылку удаленного репозитория
# git remote set-url origin git@github.com:MisyurinDaniil/myManualsProgramming.git

Отправить все локальные изменения на удаленный репозиторий origin в ветку master
# git push -u origin master

Отправить все commit на Git-hub (спросит логин пароль), по умолчанию в ветку 
main (данное название основной ветки исполльзуют все современные сервисы)
# git push -u origin main 

Чтобы забрать изменения из удаленной ветки dev репозитория origin и слить их с изменениями в текущей ветке, 
где мы находимся, выполним:
# git pull origin dev

Настройка аутентификации по SSH Linux.
Генерируем ssh ключи 
# ssh-keygen (на все вопросы отвечаем по умолчанию)
В домашней директории пользователся появится папка .ssh с парой ключей
Далее копируем открытый ключь (id-rsa.pub) в github - settings - SSH - SSH keygen

Настройка аутентификации по SSH Windows. 
Утилита для генерации праы SSH ключей на Windows. Запускаем git-bash
# ssh-keygen.exe (на все вопросы отвечаем по умолчанию)
В домашней директории пользователся появится папка .ssh с парой ключей
Далее копируем открытый ключь (id-rsa.pub) в github - settings - SSH - SSH keygen

Ветвления (branch)
Показать имеющиеся ветви 
# git branch

Создать ветвь fix_error
# git branch fix_error

Перейти на ветвь fix_error
# git checkout fix_error

Стереть ветвь fix_error, будет ругаться, если не сделать merge
# git branch -d fix_error

Стереть ветвь без предварительного merge
# git branch -D fix_error

Создать и перейти на ветвь fix_error
# git checkout -b fix_error

Соеденить весть main с ветвью fix_error
Перейдем в ветвь main и сделаем merge
# git checkout main
# git merge fix_error

Переключится на один из коммитов.
Копируем хэш коммита, посмотреть его можно командой git log и выполняем команду
# git checkout 8cda9b3d53d728a79810fabc6ae5bcc58ddc0c47

Вернуться на верх ветки main
# git checkout main

Изменить текущий коммит (изменили содержимое файлов или что-то добавили, но не хотим удалять и создавать новый коммит),
так же позволяет изменить опиание коммита
# git commit --amend

Удалить последний коммит и запушить на удаленный сервер (при условии, что после нас никто не пушил
# git reset --hard HEAD~1
# git push --force

Удалить 2 (~2) верхних коммита и переместиться на третий сверху
# git reset --hard HEAD~2

Удалить из истории 4 (~4) верхнит коммита, перейти на 5й, но файлы оставить из 1го
# git reset --soft HEAD~4

Локально создали новую ветку test, внесли изменения и хотим запушить на github нашу ветку для дальнейшего merge с master
Создаст на github ветку test и запушит в нее все коммиты
# git push --set-upstream origin test 

Удалить ветку new_branch на удаленном сервере git-hub
# git push origin --delete new_branch

Показать теги
# git tag

Создать тег "v1.0" для текущего коммита
# git tag v1.0

Отправить на удаленный сервер тег "v1.0"
# git push origin v1.0

Удалить тег "v1.1" локально 
# git tag -d v1.1

