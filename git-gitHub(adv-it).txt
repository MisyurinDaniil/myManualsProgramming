Установить GIT
# apt get install git

Посмотреть версию GIT
# git --version

Начальная конфигурация
Задаем имя пользователя. Будет отображаться напротив наших коммитов
# git config --global user.name "Daniil Misyurin"
Задаем адерс почты.
# git config --global user.email "d.a.misyurin@gmail.com"
Просмотреть текущую конфигурация GIT
# git config -l
Вся конфигурация хранится в файл ~/.gitconfig домашней директории
В Windows делается аналогичными образом и командами

Создание пустой базы GIT на локальном компьютере
# git init .

Отобразить статус GIT (показывает добавленные и измененные файлы)
# git status

Добавить все вновь созданные файлы в отслеживаемые
# git add * (git add .)

Добавить один созданный файл в отслеживаемые
# git add file3

Убрать из индекса (из отслеживаемых)
# git restore --staged .

Сделать коммит, сделать снимок (добавить изменения в наш репозиторий)
#  git commit -m "My fits commit, this is version 1.0"

Изменить описание последнего коммита
# git commit --amend -m "New message"

Перечень состояний файлов в Git
1) Untracked - после создания файла
2) Staged - после добавления файла в отслеживаемые (git add file.txt)
3) Copy in Local Repository - после добаления изменения в репозиторий (git commit -m "Version 1")
4) Copy in Remote Repository - после добавления на удаленный репозторий (git push)

Проверить история commit
# git log

Посмотреть последний commit
# git log -1

Посмотреть подробную информацию о последнем commit, что именно в нем было изменено
# git log -1 -p

Отменить изменения в файле и откатить изменения файла до полследнего commit, делает до добавления
файла в Staged. Т.е. после получения файла статуса modified
# git checkout -- file1.txt

Показывает текущие изменения в репозитории до выполнения commit (разница между staged и 
последним commit)
# git diff --staged

Добавить файлы или папки в игнорируемые. Создать в корне проекта файл .gitignore
# vim .gitignore
    *.log   
    logs/
    file1.txt

Клонировать уже имеющийся Git-hub репозиторий
# git clone https:\\...

Добавить новый удаленный репоиторий куда мы хотим пушить
# git remote add origin https://github.com/MisyurinDaniil/myManualsProgramming.git
Проветить что репозиторий добавился 
# git remote -v
Изменить ссылку удаленного репозитория
# git remote set-url origin git@github.com:MisyurinDaniil/myManualsProgramming.git

Отправить все локальные изменения на удаленный репозиторий с айдишником origin в вутку master
# git push -u origin master

Отправить все commit на Git-hub (спросит логин пароль), по умолчанию в ветку 
main (данное название основной ветки исполльзуют все современные сервисы)
# git push -u origin main 

Настройка аутентификации по SSH Linux.
Генерируем ssh ключи 
# ssh-keygen (на все вопросы отвечаем по умолчанию)
В домашней директории пользователся появится папка .ssh с парой ключей
Далее копируем открытый ключь (id-rsa.pub) в github - settings - SSH - SSH keygen

Настройка аутентификации по SSH Windows. 
Утилита для генерации праы SSH ключей на Windows. Запускаем git-bash
# ssh-keygen.exe (на все вопросы отвечаем по умолчанию)
В домашней директории пользователся появится папка .ssh с парой ключей
Далее копируем открытый ключь (id-rsa.pub) в github - settings - SSH - SSH keygen

Ветвления (branch)
Показать имеющиеся ветви 
# git branch

Создать ветвь fix_error
# git branch fix_error

Перейти на ветвь fix_error
# git checkout fix_error

Стереть ветвь fix_error, будет ругаться, если не сделать merge
# git branch -d fix_error

Стереть ветвь без предварительного merge
# git branch -D fix_error

Создать и перейти на ветвь fix_error
# git checkout -b fix_error

Соеденить весть main с ветвью fix_error
Перейдем в ветвь main и сделаем merge
# git checkout main
# git merge fix_error

