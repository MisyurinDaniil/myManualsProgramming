******************************************************

https://fooobar.com/questions/112203/how-does-one-change-the-language-of-the-command-line-interface-of-git

Как изменить язык интерфейса командной строки Git?
Я хотел бы изменить язык git (на английский) в моей установке Linux без изменения языка для других программ и не смог найти настройки. Как это сделать?

Добавьте эти строки в ~/.bashrc или ~/.bash_profile, чтобы заставить git отображать все сообщения на английском языке:

# Set Git language to English
#alias git='LANG=en_US git'
alias git='LANG=en_GB git'

Псевдоним должен переопределить LC_ALL в некоторых системах, когда установлена ​​переменная среды LC_ALL, которая имеет приоритет над LANG. Подробнее см. Спецификация UNIX - Переменные окружения.

# Set Git language to English
#alias git='LC_ALL=en_US git'
alias git='LC_ALL=en_GB git'

Если вы добавили эти строки в ~/.bashrc, псевдоним будет определен при запуске новой интерактивной оболочки. Если вы добавили его в ~/.bash_profile, псевдоним будет применяться при входе в систему.

********************************************************

----------
Инициализировать пустой репозиторий (предворительня перейдя в папку с проектом)
После инициализации появится папка.git, в которой хранятся все файлы GIT текущего проекта
mda@mda-comp:~$ cd ~/Dropbox/front-end/test/responsive_design/
git init

----------
Задаем глобальные настройки GIT (имя и почту пользователя)
git config --global user.name "Mmisyurin Daniil Lexandrovich"
git config --global user.email "d.a.misyurin@gmail.com"

----------
Вывесте глобальные настройки GIT
git config --list
или
mda@mda-comp:~$ cat ~/.gitconfig 
[user]
	name = Mmisyurin Daniil Lexandrovich
	email = d.a.misyurin@gmail.com

----------
git status -Прверить состояние репозитория

mda@mda-comp:~/Dropbox/front-end/test/responsive_design$ git status
On branch master //Ветка мастер

Initial commit // Еще ничего не зафиксировано

Untracked files: //Неотселживаемые файлы
  (use "git add <file>..." to include in what will be committed)

	index.html
	style.css

nothing added to commit but untracked files present (use "git add" to track

----------
Индексация файлов (пометка файлов, которые необходимо закоммитить)
git add index.html - проиндексировать конкретный файл
git add . - проиндексировать все файлы в текущей папке 

git status - статус нашего проекта
mda@mda-comp:~/Dropbox/front-end/test/responsive_design$ git status
On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

	new file:   index.html
	new file:   style.css

----------
сохранение слепока состояния
git commit -m "Описание коммита"

git commit -m "Начали вести историю" - сохранили слепок индексируемых файлов
mda@mda-comp:~/Dropbox/front-end/test/responsive_design$ git commit -m "Started history our project" 
[master (root-commit) 530c775] Started history our project
 2 files changed, 83 insertions(+)
 create mode 100644 index.html
 create mode 100644 style.css

mda@mda-comp:~/Dropbox/front-end/test/responsive_design$ git status
On branch master
nothing to commit, working directory clean

----------
Изменим несколько файлов в нашем проекте
mda@mda-comp:~/Dropbox/front-end/test/responsive_design$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   index.html
	modified:   style.css

no changes added to commit (use "git add" and/or "git commit -a")

Просмотреть что изменилось в модифицированных файлах
git diff

Проиндексировать файлы и закомитить
git add index.html style.css
mda@mda-comp:~/Dropbox/front-end/test/responsive_design$ git commit -m "Add comment to files for GIT"
[master 173b5c4] Add comment to files for GIT

----------
просмотреть историю коммитов
git log
Просмотреть послейдний коммит
git log -1

git show 173b5c4051b370ba36b4382ac28e579187dfc14b - просмотреть изменения в конкретном коммите

 2 files changed, 7 insertions(+), 2 deletions(-)

----------
откатить файл до последнего коммита (вернуть удаленный файл)
git checkout style.css

откатить файл до определенного коммита
git checkout 173b5c4051b370ba36b4382ac28e579187dfc14b style.css

---------
Проверить изменентя в проиндексированных файлах
git diff --staged

--------
Отменить индексацию файла (убрать из списка файлов предстоящего коммита)
git reset HEAD index.html

-------
Изменить (перезаписать полследний коммит, с новым хэш) комментарий к коммиту
git commit --amend -m "Новое сообщение коммита"

--------
Удалить файл из коммита и удалить его из проекта
git rm test.css
git status (файл помечен как удаленный и проиндексированный, готовый к коммиту)
git coommit --amend --no-edit (изменить последний коммит, удалив из его содержимого файл test.css, заменив последний коммит на новый)

--------
Удалить файл из коммита но не удалять его из текущего проекта (папки)
git rm --cached css/test.css
git status (файл удален, одновременно помечен как проиндексированный и untracked, т.е. после выполнения команды "git coommit --amend --no-edit" он удалится из последнего коммита, но не удалиться из проекта-папки)
git coommit --amend --no-edit

--------
Просмотреть лог GIT коммитов, каждый в одной строчке
git log --oneline

--------
Вывести содержимое коммита (покажет дерево комита, коммит
родителя автора коммита, описание коммита)
git cat-file -p "хэш коммита из команды git log --oneline"

---------
Посмотреть весь лог (не до текущего положения)
git log --oneline --all
Посмотреть весь лог с построением графа
git log --oneline --all --graph
Указатель HEAD говорит о текущеи положении

----------
Переключится на коммит из списка (перейти в состояние определенного коммита полностью)
git log --oneline - выведет лог в одну строку

git checkout bv00ff9 - переключить текущий коммит в состояние 
с хешем bv00ff9 (все файлы проекта примут состояние выбранногокоммита)

git checkout master - переключиться на посследний существующий коммит ветки (все файлы проекта примут состояние выбранного
коммита)

git checkout указатель-на-имя-ветки - переключиться на посследний существующий коммит ветки c определенным именем (все 
файлы проекта примут состояние выбранногокоммита)

------
master - указатель на последний коммит, его можно передавать вместо хеша последнего созданного коммита в ветке

Создать указатель на определенный коммит и создать новую ветку (branch)
git checkout -b   имя-нового-указателя      хэш-коммита,-которому-необходимо-присвоить-новый-указатель,-из-команды git log --oneline"

git status
git log --oneline
git commit -m "Новый коммит, находясь в коммите с новым указателем" - создастся новый коммит в новой ветке

Посмотреть весь лог с построением графа
git log --oneline --all --graph

---------
Слияние веток (merge)
git status - проверить в какой ветке находимся в текущий момент
git checkout master - перейдем в ветку мастер, и выполним 
вливание в нее другой ветки
git merge имя-cуществующего-указателя-для-слияния-веток -m "Описание слияния веток коммитов"

----------
Создать ветку из текущего положения
git checkout -b имя-указателя-новой-ветки
git log -1 --oneline - просмотреть последний коммит

----------------
Решение конфликтов (части файл изменены в обоих ветках)
git merge branch-two - сливаем ветку branch-two в ветку master
git merge --abort - оменяет merge (слияние)
Смотрим git status и ищем конфлик (файл с индексом both modified),
редактирекм этот конфликтный файл, ищем специальные символы в файле,
принемаем решение что оставить, удаляем специальные символы.

---------
Решение конфликта (в одной ветке файл удален, в другой существует)
git merge branch2
git status (ищем unmerged path, с состоянием deleted by us,
us наша ветка, they ветка которую вливаем)
git add имя-файла-который-был-удален - индексируем файл, если 
мы хотим его оставить
git rm имя-файла-который-был-удален-в-другой-ветке - удаляем
конфликтный файл из индекса, и после коммита он ищезнеть из проекта
